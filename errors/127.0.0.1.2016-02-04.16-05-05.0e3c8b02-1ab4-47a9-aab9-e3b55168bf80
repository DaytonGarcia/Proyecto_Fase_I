(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/lester/Documentos/web2py/gluon/contrib/pymysql/__init__.py", line 93, in Connect\n    return Connection(*args, **kwargs)\n  File "/home/lester/Documentos/web2py/gluon/contrib/pymysql/connections.py", line 575, in __init__\n    self._connect()\n  File "/home/lester/Documentos/web2py/gluon/contrib/pymysql/connections.py", line 743, in _connect\n    raise OperationalError(2003, "Can\'t connect to MySQL server on %r (%s)" % (self.host, e.args[0]))\nOperationalError: (2003, "Can\'t connect to MySQL server on \'db4free.net\' (-3)")\n'
p3
sS'layer'
p4
S'/home/lester/Documentos/web2py/applications/ProyectoFase1Lester/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\n##if not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n##    db = DAL(myconf.take('db.uri'), pool_size=myconf.take('db.pool_size', cast=int), check_reserved=['all'])\n##else:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\ndb = DAL('mysql://ayd2:123456@db4free.net:3306/ayd2')\n    ## store sessions and tickets there\nsession.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')\nmail.settings.sender = myconf.take('smtp.sender')\nmail.settings.login = myconf.take('smtp.login')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/lester/Documentos/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/lester/Documentos/web2py/applications/ProyectoFase1Lester/models/db.py", line 23, in <module>\n    db = DAL(\'mysql://ayd2:123456@db4free.net:3306/ayd2\')\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/home/lester/Documentos/web2py/gluon/packages/dal/pydal/adapters/mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/lester/Documentos/web2py/gluon/contrib/pymysql/__init__.py", line 93, in Connect\n    return Connection(*args, **kwargs)\n  File "/home/lester/Documentos/web2py/gluon/contrib/pymysql/connections.py", line 575, in __init__\n    self._connect()\n  File "/home/lester/Documentos/web2py/gluon/contrib/pymysql/connections.py", line 743, in _connect\n    raise OperationalError(2003, "Can\'t connect to MySQL server on %r (%s)" % (self.host, e.args[0]))\nOperationalError: (2003, "Can\'t connect to MySQL server on \'db4free.net\' (-3)")\n\n'
p11
s.